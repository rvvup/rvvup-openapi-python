# coding: utf-8

"""
    Rvvup API

    Rvvup Public API

    The version of the OpenAPI document: 2024-03-01
    Contact: info@rvvup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.payment import Payment

class TestPayment(unittest.TestCase):
    """Payment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Payment:
        """Test Payment
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Payment`
        """
        model = Payment()
        if include_optional:
            return Payment(
                amount = openapi_client.models.money.Money(
                    amount = '', 
                    currency = '', ),
                authorization_expires_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                capture_type = 'AUTOMATIC_CHECKOUT',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                decline_reason = 'INSUFFICIENT_FUNDS',
                id = '',
                method = 'FAKE_PAYMENT_METHOD',
                payment_session_id = '',
                settlement_status = 'NOT_INITIATED',
                status = 'CREATED',
                summary = openapi_client.models.payment_summary.PaymentSummary(
                    is_manually_capturable = True, 
                    is_refundable = True, 
                    is_voidable = True, 
                    payment_actions = [
                        openapi_client.models.payment_action.PaymentAction(
                            method = 'REDIRECT_URL', 
                            type = 'AUTHORIZATION', 
                            value = '', )
                        ], 
                    refundable_amount = openapi_client.models.money.Money(
                        amount = '', 
                        currency = '', ), ),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                void_reason = 'CUSTOMER_REQUEST'
            )
        else:
            return Payment(
                amount = openapi_client.models.money.Money(
                    amount = '', 
                    currency = '', ),
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                id = '',
                method = 'FAKE_PAYMENT_METHOD',
                payment_session_id = '',
                settlement_status = 'NOT_INITIATED',
                status = 'CREATED',
                summary = openapi_client.models.payment_summary.PaymentSummary(
                    is_manually_capturable = True, 
                    is_refundable = True, 
                    is_voidable = True, 
                    payment_actions = [
                        openapi_client.models.payment_action.PaymentAction(
                            method = 'REDIRECT_URL', 
                            type = 'AUTHORIZATION', 
                            value = '', )
                        ], 
                    refundable_amount = openapi_client.models.money.Money(
                        amount = '', 
                        currency = '', ), ),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testPayment(self):
        """Test Payment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

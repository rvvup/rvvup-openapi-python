openapi: 3.0.1
info:
  contact:
    email: info@rvvup.com
    url: https://rvvup.com
  description: Rvvup Public API
  title: Rvvup API
  version: "2024-03-01"
externalDocs:
  description: Rvvup Developer Documentation
  url: https://docs.rvvup.com
security:
- apiKey: []
paths:
  /api/2024-03-01/{merchantId}/checkout-templates:
    get:
      description: List checkout templates
      operationId: listCheckoutTemplates
      parameters:
      - description: pagination offset
        in: query
        name: offset
        schema:
          type: integer
          format: int64
      - description: pagination limit
        in: query
        name: limit
        schema:
          type: integer
          format: int32
      - description: merchant id
        in: path
        name: merchantId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutTemplatePage"
          description: List of checkout templates
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
      - apiKey: []
      summary: List checkout templates
      tags:
      - Checkout Templates
    post:
      description: Creates a new checkout template.
      operationId: createCheckoutTemplate
      parameters:
      - description: merchant id
        in: path
        name: merchantId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckoutTemplateCreateInput"
        description: The checkout template to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutTemplate"
          description: The created checkout template
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
      - apiKey: []
      summary: Create new checkout template
      tags:
      - Checkout Templates
  /api/2024-03-01/{merchantId}/checkout-templates/{checkoutTemplateId}:
    get:
      description: Get a checkout template by id
      operationId: getCheckoutTemplate
      parameters:
      - description: checkout template id
        in: path
        name: checkoutTemplateId
        required: true
        schema:
          type: string
      - description: merchant id
        in: path
        name: merchantId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutTemplate"
          description: Checkout Template
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Checkout template not found
      security:
      - apiKey: []
      summary: Get a checkout template
      tags:
      - Checkout Templates
    patch:
      description: Update a checkout template
      operationId: updateCheckoutTemplate
      parameters:
      - description: checkout template id
        in: path
        name: checkoutTemplateId
        required: true
        schema:
          type: string
      - description: merchant id
        in: path
        name: merchantId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckoutTemplateUpdateInput"
        description: The checkout template to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutTemplate"
          description: The updated Checkout Template
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Checkout template not found
      security:
      - apiKey: []
      summary: Update a checkout template
      tags:
      - Checkout Templates
  /api/2024-03-01/{merchantId}/checkouts:
    get:
      description: List checkouts
      operationId: listCheckouts
      parameters:
      - description: pagination offset
        in: query
        name: offset
        schema:
          type: integer
          format: int64
      - description: pagination limit
        in: query
        name: limit
        schema:
          type: integer
          format: int32
      - description: merchant id
        in: path
        name: merchantId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutPage"
          description: List of checkouts
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
      - apiKey: []
      summary: List checkouts
      tags:
      - Checkouts
    post:
      description: Creates a new checkout.
      operationId: createCheckout
      parameters:
      - description: merchant id
        in: path
        name: merchantId
        required: true
        schema:
          type: string
      - description: Idempotency Key
        in: header
        name: Idempotency-Key
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckoutCreateInput"
        description: The Checkout to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
          description: The created checkout
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
      - apiKey: []
      summary: Create new checkout
      tags:
      - Checkouts
  /api/2024-03-01/{merchantId}/checkouts/{checkoutId}:
    get:
      description: Get a checkout by id
      operationId: getCheckout
      parameters:
      - description: checkout id
        in: path
        name: checkoutId
        required: true
        schema:
          type: string
      - description: merchant id
        in: path
        name: merchantId
        required: true
        schema:
          type: string
      - description: Accept header
        in: header
        name: Accept
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checkout"
            application/schema+json:
              schema:
                type: string
          description: Checkout
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Checkout not found
      security:
      - apiKey: []
      summary: Get a checkout
      tags:
      - Checkouts
  /api/2024-03-01/{merchantId}/checkouts/{checkoutId}/payment-methods:
    get:
      description: Lists the currently eligible payment methods for a checkout. The
        payment method status and checkout template settings are used to determine
        the eligible methods.
      operationId: listCheckoutPaymentMethods
      parameters:
      - description: checkout id
        in: path
        name: checkoutId
        required: true
        schema:
          type: string
      - description: merchant id
        in: path
        name: merchantId
        required: true
        schema:
          type: string
      - description: pagination offset
        in: query
        name: offset
        schema:
          type: integer
          format: int64
      - description: pagination limit
        in: query
        name: limit
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentMethodDetailsPage"
          description: Checkout
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Not found
      security:
      - apiKey: []
      summary: Get payment methods for a checkout
      tags:
      - Checkouts
  /api/2024-03-01/{merchantId}/checkouts/{checkoutId}/payment-sessions:
    post:
      description: Creates a payment session with a new active payment.
      operationId: createPaymentSession
      parameters:
      - description: merchant id
        in: path
        name: merchantId
        required: true
        schema:
          type: string
      - description: checkout id
        in: path
        name: checkoutId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentSessionCreateInput"
        description: The Payment Session to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentSession"
          description: The created payment session
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
      - apiKey: []
      summary: Create a payment session
      tags:
      - Payment Sessions
  /api/2024-03-01/{merchantId}/checkouts/{checkoutId}/payment-sessions/{paymentSessionId}:
    get:
      description: Get a payment session by id.
      operationId: getPaymentSession
      parameters:
      - description: merchant id
        in: path
        name: merchantId
        required: true
        schema:
          type: string
      - description: checkout id
        in: path
        name: checkoutId
        required: true
        schema:
          type: string
      - description: payment session id
        in: path
        name: paymentSessionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentSession"
          description: Payment Session
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
      - apiKey: []
      summary: Get a payment session
      tags:
      - Payment Sessions
  /api/2024-03-01/{merchantId}/payment-links:
    get:
      description: List payment links
      operationId: listPaymentLinks
      parameters:
      - description: pagination offset
        in: query
        name: offset
        schema:
          type: integer
          format: int64
      - description: pagination limit
        in: query
        name: limit
        schema:
          type: integer
          format: int32
      - description: merchant id
        in: path
        name: merchantId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentLinkPage"
          description: List of payment links
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
      - apiKey: []
      summary: List payment links
      tags:
      - Payment Links
    post:
      description: Creates a new payment link. User can choose whether to make it
        reusable
      operationId: createPaymentLink
      parameters:
      - description: merchant id
        in: path
        name: merchantId
        required: true
        schema:
          type: string
      - description: Idempotency Key
        in: header
        name: Idempotency-Key
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentLinkCreateInput"
        description: The Payment Link to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentLink"
          description: The created payment link
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
      - apiKey: []
      summary: Create new payment link
      tags:
      - Payment Links
  /api/2024-03-01/{merchantId}/payment-links/{paymentLinkId}:
    delete:
      description: Deactivate a payment link
      operationId: deactivatePaymentLink
      parameters:
      - description: payment link id
        in: path
        name: paymentLinkId
        required: true
        schema:
          type: string
      - description: merchant id
        in: path
        name: merchantId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentLink"
          description: Payment link
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Payment link not found
      security:
      - apiKey: []
      summary: Deactivate a payment link
      tags:
      - Payment Links
    get:
      description: Get a payment link by id
      operationId: getPaymentLink
      parameters:
      - description: payment link id
        in: path
        name: paymentLinkId
        required: true
        schema:
          type: string
      - description: merchant id
        in: path
        name: merchantId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaymentLink"
          description: Payment link
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Payment link not found
      security:
      - apiKey: []
      summary: Get a payment link
      tags:
      - Payment Links
  /api/2024-03-01/{merchantId}/statements/export:
    post:
      description: Export statements in different formats.
      operationId: exportStatement
      parameters:
      - description: merchant id
        in: path
        name: merchantId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatementExportRequest"
        description: Statement export filters
        required: true
      responses:
        "200":
          content:
            application/octet-stream: {}
          description: The export statement
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
      - apiKey: []
      summary: Export a statement
      tags:
      - Statement Exports
  /api/2024-03-01/{merchantId}/webhooks:
    get:
      description: Get all webhook
      operationId: listWebhooks
      parameters:
      - description: Merchant ID
        in: path
        name: merchantId
        required: true
        schema:
          type: string
      - description: pagination offset
        in: query
        name: offset
        schema:
          type: integer
          format: int64
      - description: pagination limit
        in: query
        name: limit
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookPage"
          description: The webhook
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
      - apiKey: []
      summary: Get all webhook
      tags:
      - Webhooks
    post:
      description: Create a new webhook
      operationId: createWebhook
      parameters:
      - description: Merchant ID
        in: path
        name: merchantId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookCreateInput"
        description: The webhook to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
          description: The created webhook
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
      - apiKey: []
      summary: Create a new webhook
      tags:
      - Webhooks
  /api/2024-03-01/{merchantId}/webhooks/{webhookId}:
    get:
      description: Get a webhook by id
      operationId: getWebhook
      parameters:
      - description: Merchant ID
        in: path
        name: merchantId
        required: true
        schema:
          type: string
      - description: Webhook ID
        in: path
        name: webhookId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
          description: The webhook
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
        "404":
          description: Webhook not found
      security:
      - apiKey: []
      summary: Get a webhook by id
      tags:
      - Webhooks
    patch:
      description: Update a webhook
      operationId: updateWebhook
      parameters:
      - description: Merchant ID
        in: path
        name: merchantId
        required: true
        schema:
          type: string
      - description: Webhook ID
        in: path
        name: webhookId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookUpdateInput"
        description: The webhook to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
          description: The updated webhook
        "400":
          description: Validation failed
        "401":
          description: Unauthorized
        "403":
          description: User does not have permission
      security:
      - apiKey: []
      summary: Update a webhook
      tags:
      - Webhooks
components:
  schemas:
    Address:
      type: object
      properties:
        city:
          type: string
          description: City.
        company:
          type: string
          description: Company name.
        countryCode:
          type: string
          description: Two letter ISO 3166-1 alpha-2 country code.
        line1:
          type: string
          description: Address line 1.
        line2:
          type: string
          description: Address line 2.
        name:
          type: string
          description: Name.
        phoneNumber:
          type: string
          description: Phone number.
        postcode:
          type: string
          description: Postcode.
        state:
          type: string
          description: State.
      required:
      - city
      - countryCode
      - line1
      - name
      - postcode
    AddressInput:
      type: object
      description: The address details.
      properties:
        city:
          type: string
          description: City.
          example: London
          maxLength: 128
          minLength: 1
        company:
          type: string
          description: Company name.
          example: null
          maxLength: 128
          minLength: 1
        countryCode:
          type: string
          description: Two letter ISO 3166-1 alpha-2 country code.
          example: GB
        line1:
          type: string
          description: Address line 1.
          example: 10 Downing Street
          maxLength: 128
          minLength: 1
        line2:
          type: string
          description: Address line 2.
          example: Westminster
          maxLength: 128
          minLength: 1
        name:
          type: string
          description: Name.
          example: John Doe
          maxLength: 255
          minLength: 1
        phoneNumber:
          type: string
          description: Phone number.
          example: null
          maxLength: 32
          minLength: 1
        postcode:
          type: string
          description: Postcode.
          example: SW1A 2AA
          maxLength: 128
          minLength: 1
        state:
          type: string
          description: State.
          example: Greater London
          maxLength: 128
          minLength: 1
      required:
      - city
      - countryCode
      - line1
      - name
      - postcode
    ApplicationSource:
      type: string
      description: The source of the application.
      enum:
      - API
      - XERO
      - MOTO
      - DASHBOARD_MOTO
      - DASHBOARD_PAYMENT_LINK
      - MAGENTO_MOTO
      - MAGENTO_PAYMENT_LINK
      - PAY_NOW_IN_PERSON
      - PAY_NOW_MOTO
      - PAY_NOW_PAYMENT_LINK
    Checkout:
      type: object
      description: Checkout object
      properties:
        amount:
          $ref: "#/components/schemas/Money"
        billingAddress:
          $ref: "#/components/schemas/Address"
        checkoutTemplateId:
          type: string
          description: The ID of the checkout template to use for this checkout.
        createdAt:
          type: string
          format: date-time
          description: The datetime when the checkout was created.
        customer:
          $ref: "#/components/schemas/Customer"
        expiresAt:
          type: string
          format: date-time
          description: The datetime when the checkout will expire.
        id:
          type: string
          description: The unique ID of the checkout.
        merchantId:
          type: string
          description: The ID of the merchant that owns this checkout.
        metadata:
          type: object
          additionalProperties:
            type: string
            description: Key value pairs to store additional information about the
              checkout.
          description: Key value pairs to store additional information about the checkout.
        paymentLinkId:
          type: string
          description: The ID of the payment link that was used to create this checkout.
        paymentSessionIds:
          type: array
          description: The IDs of the payment sessions that were created for this
            checkout.
          items:
            type: string
            description: The IDs of the payment sessions that were created for this
              checkout.
        reference:
          type: string
          description: Your reference to identify the checkout and the subsequently
            created payment sessions.
        source:
          $ref: "#/components/schemas/ApplicationSource"
        status:
          $ref: "#/components/schemas/CheckoutStatus"
        successUrl:
          type: string
          description: The URL to redirect the customer to after the checkout is completed
            successfully.
        updatedAt:
          type: string
          format: date-time
          description: The datetime when the checkout was last updated.
        url:
          type: string
          description: The URL to the hosted checkout page.
      required:
      - checkoutTemplateId
      - createdAt
      - expiresAt
      - id
      - merchantId
      - metadata
      - paymentSessionIds
      - source
      - status
      - updatedAt
      - url
    CheckoutAmountType:
      type: string
      description: "The amount type for the checkout. This can be either a fixed amount\
        \ or an editable amount. If the amount is editable, the user can enter the\
        \ amount they want to pay inside the hosted checkout. If the amount is fixed,\
        \ the amount set in the checkout is the amount that will be paid and cannot\
        \ be changed inside the hosted checkout."
      enum:
      - FIXED
      - EDITABLE
    CheckoutApplePaySettings:
      type: object
      description: The Apple Pay settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFields"
    CheckoutApplePaySettingsInput:
      type: object
      description: The Apple Pay settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsInput"
    CheckoutApplePaySettingsUpdateInput:
      type: object
      description: The Apple Pay settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsUpdateInput"
    CheckoutCardSettings:
      type: object
      description: The Card settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFields"
    CheckoutCardSettingsInput:
      type: object
      description: The Card settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsInput"
    CheckoutCardSettingsUpdateInput:
      type: object
      description: The Card settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsUpdateInput"
    CheckoutCreateInput:
      type: object
      description: The input to create a new checkout.
      properties:
        amount:
          $ref: "#/components/schemas/MoneyInput"
        billingAddress:
          $ref: "#/components/schemas/AddressInput"
        checkoutTemplateId:
          type: string
          description: |-
            The ID of the checkout template to use for this checkout.
                                     If not provided, the default template will be used.
                                     If provided, the template must be available to the merchant.
          example: null
        customer:
          $ref: "#/components/schemas/CustomerInput"
        metadata:
          type: object
          additionalProperties:
            type: string
            description: Key value pairs to store additional information about the
              checkout.
            example: "{\"key1\":\"value1\",\"key2\":\"value2\"}"
          description: Key value pairs to store additional information about the checkout.
          example:
            key1: value1
            key2: value2
        reference:
          type: string
          description: Your reference to identify the checkout and the subsequently
            created payment sessions.
          example: "Order #12345"
          maxLength: 255
          minLength: 1
        source:
          $ref: "#/components/schemas/ApplicationSource"
        successUrl:
          type: string
          description: |-
            The URL to redirect the user to after the checkout is completed successfully.
                                     This field supports the template variable `{{CHECKOUT_ID}}` which will be replaced with the
                                     created checkouts ID.
          example: "https://example.com/success?checkout_id={{CHECKOUT_ID}}"
    CheckoutCustomerFieldType:
      type: string
      description: The customer field type.
      enum:
      - GIVEN_NAME
      - SURNAME
      - EMAIL
      - PHONE_NUMBER
      - BILLING_ADDRESS
    CheckoutCustomerFields:
      type: object
      properties:
        optional:
          type: array
          description: The optional customer fields for the checkout.
          items:
            $ref: "#/components/schemas/CheckoutCustomerFieldType"
          uniqueItems: true
        required:
          type: array
          description: The required customer fields for the checkout.
          items:
            $ref: "#/components/schemas/CheckoutCustomerFieldType"
          uniqueItems: true
    CheckoutCustomerFieldsInput:
      type: object
      description: |-
        The customer fields that are required or optional for the checkout.
                             If a field is not required or optional, it will not be shown in the hosted checkout page.
      properties:
        optional:
          type: array
          description: The optional customer fields for the checkout.
          items:
            $ref: "#/components/schemas/CheckoutCustomerFieldType"
          uniqueItems: true
        required:
          type: array
          description: The required customer fields for the checkout.
          items:
            $ref: "#/components/schemas/CheckoutCustomerFieldType"
          uniqueItems: true
    CheckoutCustomerFieldsUpdateInput:
      type: object
      description: |-
        The customer fields that are required or optional for the checkout.
                             If a field is not required or optional, it will not be shown in the hosted checkout page.
      properties:
        optional:
          type: array
          description: The optional customer fields for the checkout.
          items:
            $ref: "#/components/schemas/CheckoutCustomerFieldType"
          uniqueItems: true
        required:
          type: array
          description: The required customer fields for the checkout.
          items:
            $ref: "#/components/schemas/CheckoutCustomerFieldType"
          uniqueItems: true
    CheckoutPage:
      type: object
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/Checkout"
        total:
          type: integer
          format: int32
      required:
      - pageable
      - results
      - total
    CheckoutPayByBankSettings:
      type: object
      description: The Pay by Bank settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFields"
    CheckoutPayByBankSettingsInput:
      type: object
      description: The Pay by Bank settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsInput"
    CheckoutPayByBankSettingsUpdateInput:
      type: object
      description: The Pay by Bank settings to be used for the checkout.
      properties:
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsUpdateInput"
    CheckoutPaymentMethodSettings:
      type: object
      description: The payment method settings to be used for the checkout.
      properties:
        applePay:
          $ref: "#/components/schemas/CheckoutApplePaySettings"
        card:
          $ref: "#/components/schemas/CheckoutCardSettings"
        payByBank:
          $ref: "#/components/schemas/CheckoutPayByBankSettings"
    CheckoutPaymentMethodSettingsInput:
      type: object
      description: The payment method settings to be used for the checkout.
      properties:
        applePay:
          $ref: "#/components/schemas/CheckoutApplePaySettingsInput"
        card:
          $ref: "#/components/schemas/CheckoutCardSettingsInput"
        payByBank:
          $ref: "#/components/schemas/CheckoutPayByBankSettingsInput"
    CheckoutPaymentMethodSettingsUpdateInput:
      type: object
      description: The payment method settings to be used for the checkout.
      properties:
        applePay:
          $ref: "#/components/schemas/CheckoutApplePaySettingsUpdateInput"
        card:
          $ref: "#/components/schemas/CheckoutCardSettingsUpdateInput"
        payByBank:
          $ref: "#/components/schemas/CheckoutPayByBankSettingsUpdateInput"
    CheckoutStatus:
      type: string
      description: The status of the checkout.
      enum:
      - ACTIVE
      - EXPIRED
      - COMPLETED
    CheckoutTemplate:
      type: object
      properties:
        amountType:
          $ref: "#/components/schemas/CheckoutAmountType"
        createdAt:
          type: string
          format: date-time
          description: The datetime when the checkout template was created.
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFields"
        enabledPaymentMethods:
          type: array
          description: Ordered list of payment methods that are enabled for the checkout.
          items:
            $ref: "#/components/schemas/PaymentMethod"
        id:
          type: string
          description: The unique ID of the checkout template.
        merchantId:
          type: string
          description: The ID of the merchant that owns this checkout template.
        name:
          type: string
          description: The name of the checkout template.
        notifyCustomer:
          type: boolean
          description: Whether the customer should be notified on payment completion.
        notifyMerchant:
          type: boolean
          description: Whether you should be notified on payment completion.
        paymentMethodSettings:
          $ref: "#/components/schemas/CheckoutPaymentMethodSettings"
        source:
          $ref: "#/components/schemas/ApplicationSource"
        updatedAt:
          type: string
          format: date-time
          description: The datetime when the checkout template was last updated.
      required:
      - amountType
      - createdAt
      - id
      - merchantId
      - name
      - notifyCustomer
      - notifyMerchant
      - source
      - updatedAt
    CheckoutTemplateCreateInput:
      type: object
      description: The input for creating a checkout template.
      example:
        name: My Checkout Template
        source: API
        amountType: FIXED
        enabledPaymentMethods:
        - CARD
        - APPLE_PAY
        - PAY_BY_BANK
        notifyCustomer: false
        notifyMerchant: false
        customerFields:
          required:
          - GIVEN_NAME
          - SURNAME
          - EMAIL
          optional:
          - PHONE_NUMBER
        paymentMethodSettings: null
      properties:
        amountType:
          $ref: "#/components/schemas/CheckoutAmountType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsInput"
        enabledPaymentMethods:
          type: array
          description: Ordered list of payment methods that are enabled for the checkout.
          enum:
          - CARD
          - APPLE_PAY
          - PAY_BY_BANK
          items:
            $ref: "#/components/schemas/PaymentMethod"
        name:
          type: string
          description: The name of the checkout template.
          maxLength: 255
          minLength: 1
        notifyCustomer:
          type: boolean
          default: false
          description: Whether the customer should be notified on payment completion.
        notifyMerchant:
          type: boolean
          default: false
          description: Whether you should be notified on payment completion.
        paymentMethodSettings:
          $ref: "#/components/schemas/CheckoutPaymentMethodSettingsInput"
        source:
          $ref: "#/components/schemas/ApplicationSource"
      required:
      - name
    CheckoutTemplatePage:
      type: object
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/CheckoutTemplate"
        total:
          type: integer
          format: int32
      required:
      - pageable
      - results
      - total
    CheckoutTemplateUpdateInput:
      type: object
      description: The input for updating a checkout template.
      example:
        name: My Checkout Template Updated
        amountType: FIXED
        enabledPaymentMethods:
        - CARD
        - PAY_BY_BANK
        notifyCustomer: false
        notifyMerchant: false
        customerFields:
          required:
          - GIVEN_NAME
          - SURNAME
          - EMAIL
          optional:
          - PHONE_NUMBER
        paymentMethodSettings: null
      properties:
        amountType:
          $ref: "#/components/schemas/CheckoutAmountType"
        customerFields:
          $ref: "#/components/schemas/CheckoutCustomerFieldsUpdateInput"
        enabledPaymentMethods:
          type: array
          description: Ordered list of payment methods that are enabled for the checkout.
          enum:
          - CARD
          - APPLE_PAY
          - PAY_BY_BANK
          items:
            $ref: "#/components/schemas/PaymentMethod"
        name:
          type: string
          description: The name of the checkout template.
          maxLength: 255
          minLength: 1
        notifyCustomer:
          type: boolean
          default: false
          description: Whether the customer should be notified on payment completion.
        notifyMerchant:
          type: boolean
          default: false
          description: Whether you should be notified on payment completion.
        paymentMethodSettings:
          $ref: "#/components/schemas/CheckoutPaymentMethodSettingsUpdateInput"
    Customer:
      type: object
      properties:
        email:
          type: string
          description: The customer's email address.
        givenName:
          type: string
          description: The customer's given name.
        phoneNumber:
          type: string
          description: The customer's phone number.
        surname:
          type: string
          description: The customer's surname.
    CustomerInput:
      type: object
      description: The customer's details.
      properties:
        email:
          type: string
          description: The customer's email address.
          example: null
          maxLength: 128
          minLength: 1
        givenName:
          type: string
          description: The customer's given name.
          example: John
          maxLength: 128
          minLength: 1
        phoneNumber:
          type: string
          description: The customer's phone number.
          example: null
          maxLength: 32
          minLength: 1
        surname:
          type: string
          description: The customer's surname.
          example: Doe
          maxLength: 128
          minLength: 1
    Item:
      type: object
      description: List of items that the customer is purchasing.
      properties:
        createdAt:
          type: string
          format: date-time
          description: The datetime when the item was created.
        id:
          type: string
          description: The unique ID for the item.
        name:
          type: string
          description: The name of the item.
        price:
          $ref: "#/components/schemas/Money"
        priceWithTax:
          $ref: "#/components/schemas/Money"
        quantity:
          type: string
          description: The quantity of the item being purchased.
        restriction:
          $ref: "#/components/schemas/ItemRestriction"
        sku:
          type: string
          description: Stock keeping unit - the unique identifier for the item.
        tax:
          $ref: "#/components/schemas/Money"
        total:
          $ref: "#/components/schemas/Money"
      required:
      - createdAt
      - id
      - name
      - price
      - quantity
      - restriction
      - sku
      - total
    ItemInput:
      type: object
      description: An item that the customer is purchasing.
      example: null
      properties:
        name:
          type: string
          description: The name of the item.
          maxLength: 255
          minLength: 1
        price:
          $ref: "#/components/schemas/MoneyInput"
        priceWithTax:
          $ref: "#/components/schemas/MoneyInput"
        quantity:
          type: string
          description: The quantity of the item being purchased.
        restriction:
          $ref: "#/components/schemas/ItemRestriction"
        sku:
          type: string
          description: Stock keeping unit - the unique identifier for the item.
          maxLength: 128
          minLength: 1
        tax:
          $ref: "#/components/schemas/MoneyInput"
        total:
          $ref: "#/components/schemas/MoneyInput"
      required:
      - name
      - price
      - quantity
      - sku
      - total
    ItemRestriction:
      type: string
      description: Indicator of restrictions on the item. Some payment methods are
        unavailable for restricted items.
      enum:
      - ALLOWED
      - RESTRICTED
      - PROHIBITED
    Money:
      type: object
      properties:
        amount:
          type: string
          description: The amount.
        currency:
          type: string
          description: |-
            The three-letter ISO-4217 currency code of the amount.
                                     For cryptocurrencies, the currency code is the cryptocurrency symbol in uppercase.
      required:
      - amount
      - currency
    MoneyInput:
      type: object
      example:
        amount: "100.00"
        currency: GBP
      properties:
        amount:
          type: string
          description: The amount as a string.
        currency:
          type: string
          description: The three-letter ISO-4217 currency code of the amount.
          enum:
          - GBP
          pattern: GBP
      required:
      - amount
      - currency
    PageCheckout:
      type: object
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/Checkout"
        total:
          type: integer
          format: int32
      required:
      - pageable
      - results
      - total
    PageCheckoutTemplate:
      type: object
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/CheckoutTemplate"
        total:
          type: integer
          format: int32
      required:
      - pageable
      - results
      - total
    PagePaymentLink:
      type: object
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/PaymentLink"
        total:
          type: integer
          format: int32
      required:
      - pageable
      - results
      - total
    PagePaymentMethodDetail:
      type: object
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/PaymentMethodDetail"
        total:
          type: integer
          format: int32
      required:
      - pageable
      - results
      - total
    PageWebhook:
      type: object
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/Webhook"
        total:
          type: integer
          format: int32
      required:
      - pageable
      - results
      - total
    Pageable:
      type: object
      properties:
        limit:
          type: integer
          format: int32
        offset:
          type: integer
          format: int64
      required:
      - limit
      - offset
    Payment:
      type: object
      description: List of payments that have been made for the payment session.
      properties:
        amount:
          $ref: "#/components/schemas/Money"
        authorizationExpiresAt:
          type: string
          format: date-time
          description: The datetime when the payment's authorization expires.
        captureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        createdAt:
          type: string
          format: date-time
          description: The datetime when the payment was created.
        declineReason:
          $ref: "#/components/schemas/PaymentDeclineReason"
        id:
          type: string
          description: The unique ID for the payment.
        method:
          $ref: "#/components/schemas/PaymentMethod"
        paymentSessionId:
          type: string
          description: The ID of the payment session that the payment was created
            in.
        settlementStatus:
          $ref: "#/components/schemas/PaymentSettlementStatus"
        status:
          $ref: "#/components/schemas/PaymentStatus"
        summary:
          $ref: "#/components/schemas/PaymentSummary"
        updatedAt:
          type: string
          format: date-time
          description: The datetime when the payment was last updated.
        voidReason:
          $ref: "#/components/schemas/PaymentVoidReason"
      required:
      - amount
      #- captureType
      - createdAt
      - id
      - method
      - paymentSessionId
      - settlementStatus
      - status
      - summary
      - updatedAt
    PaymentAction:
      type: object
      description: The list of actions that can be performed on the payment.
      properties:
        method:
          $ref: "#/components/schemas/PaymentActionMethod"
        type:
          $ref: "#/components/schemas/PaymentActionType"
        value:
          type: string
      required:
      - method
      - type
      - value
    PaymentActionMethod:
      type: string
      description: The method of the payment action.
      enum:
      - REDIRECT_URL
      - TOKEN
      - URL
    PaymentActionType:
      type: string
      description: The type of the payment action.
      enum:
      - AUTHORIZATION
      - CAPTURE
      - CANCEL
      - CONFIRM_AUTHORIZATION
      - CARD_3DS_AUTHENTICATION
    PaymentCaptureType:
      type: string
      description: The capture type for the payment.
      enum:
      - AUTOMATIC_CHECKOUT
      - AUTOMATIC_PLUGIN
      - MANUAL
    PaymentDeclineReason:
      type: string
      description: The reason the payment was declined.
      enum:
      - INSUFFICIENT_FUNDS
      - FUNDING_INSTRUMENT_DECLINED
      - CONSENT_MISSING
      - SUSPECTED_FRAUD
      - AMOUNT_LIMITS_EXCEEDED
      - ACCOUNT_CLOSED
      - CVV2_FAILURE
      - FUNDING_INSTRUMENT_EXPIRED
      - FUNDING_INSTRUMENT_INVALID
    PaymentLink:
      type: object
      description: Payment link object
      properties:
        amount:
          $ref: "#/components/schemas/Money"
        checkoutIds:
          type: array
          description: The IDs of the checkouts that were created for this payment
            link.
          items:
            type: string
            description: The IDs of the checkouts that were created for this payment
              link.
        checkoutTemplateId:
          type: string
          description: |-
            The ID of the checkout template to use for this payment link.
                                     If not provided, the default template will be used.
        createdAt:
          type: string
          format: date-time
          description: The datetime when the payment link was created.
        id:
          type: string
          description: The unique ID of the payment link.
        merchantId:
          type: string
          description: The ID of the merchant that owns this checkout.
        reference:
          type: string
          description: |-
            Your reference to identify the payment link and subsequently created checkouts
                                     and payment sessions.
        reusable:
          type: boolean
          description: Whether the payment link can be reused for multiple payments.
        source:
          $ref: "#/components/schemas/ApplicationSource"
        status:
          $ref: "#/components/schemas/PaymentLinkStatus"
        updatedAt:
          type: string
          format: date-time
          description: The datetime when the payment link was last updated.
        url:
          type: string
          description: The URL to the hosted payment link page.
      required:
      - checkoutIds
      - createdAt
      - id
      - merchantId
      - reusable
      - source
      - status
      - updatedAt
      - url
    PaymentLinkCreateInput:
      type: object
      description: The input for creating a payment link.
      properties:
        amount:
          $ref: "#/components/schemas/MoneyInput"
        checkoutTemplateId:
          type: string
          description: |-
            The ID of the checkout template to use for this payment link.
                                     If not provided, the default template will be used.
                                     If provided, the template must be available to the merchant.
          example: null
        reference:
          type: string
          description: |-
            Your reference to identify the payment link and subsequently created checkouts
                                     and payment sessions.
          example: INVOICE-12345
          maxLength: 255
          minLength: 1
        reusable:
          type: boolean
          default: false
          description: Whether the payment link can be reused for multiple payments.
          example: false
        source:
          $ref: "#/components/schemas/ApplicationSource"
    PaymentLinkPage:
      type: object
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/PaymentLink"
        total:
          type: integer
          format: int32
      required:
      - pageable
      - results
      - total
    PaymentLinkStatus:
      type: string
      description: The status of the payment link.
      enum:
      - ACTIVE
      - EXPIRED
      - INACTIVE
      - COMPLETED
    PaymentMethod:
      type: string
      description: The payment method.
      enum:
      - FAKE_PAYMENT_METHOD
      - CLEARPAY
      - CRYPTO
      - PAYPAL
      - PAYPAL_CUSTOM_CARD
      - CARD
      - APPLE_PAY
      - PAY_BY_BANK
    PaymentMethodAsset:
      type: object
      description: Payment method assets object
      properties:
        assetType:
          $ref: "#/components/schemas/PaymentMethodAssetType"
        attributes:
          type: object
          additionalProperties:
            type: string
        url:
          type: string
      required:
      - assetType
      - attributes
      - url
    PaymentMethodAssetType:
      type: string
      description: The type of the payment method asset.
      enum:
      - SCRIPT
    PaymentMethodDetail:
      type: object
      description: Payment method object
      properties:
        limits:
          $ref: "#/components/schemas/PaymentMethodLimit"
        logoUrl:
          type: string
        name:
          $ref: "#/components/schemas/PaymentMethod"
        settings:
          $ref: "#/components/schemas/PaymentMethodSettings"
        status:
          $ref: "#/components/schemas/PaymentMethodStatus"
        summaryUrl:
          type: string
      required:
      - logoUrl
      - name
      - settings
      - status
      - summaryUrl
    PaymentMethodDetailsPage:
      type: object
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/PaymentMethodDetail"
        total:
          type: integer
          format: int32
      required:
      - pageable
      - results
      - total
    PaymentMethodLimit:
      type: object
      description: Payment method limits object. Contains expiration date and restrictions
        on the total for a currency.
      properties:
        expiresAt:
          type: string
          format: date-time
        total:
          type: array
          items:
            $ref: "#/components/schemas/PaymentMethodTotalLimit"
      required:
      - expiresAt
      - total
    PaymentMethodSettings:
      type: object
      description: Payment method settings object
      properties:
        assets:
          type: array
          items:
            $ref: "#/components/schemas/PaymentMethodAsset"
        description:
          type: string
        displayName:
          type: string
      required:
      - assets
      - description
      - displayName
    PaymentMethodStatus:
      type: string
      description: The status of the payment method.
      enum:
      - ENABLED
      - DISABLED
      - UNAVAILABLE
      - SUSPENDED
    PaymentMethodTotalLimit:
      type: object
      description: Payment method total limit object. Contains min and max limits
        for a currency.
      properties:
        currency:
          type: string
        max:
          type: string
        min:
          type: string
      required:
      - currency
      - max
      - min
    PaymentSession:
      type: object
      properties:
        billingAddress:
          $ref: "#/components/schemas/Address"
        checkoutId:
          type: string
          description: The ID of the checkout that the payment session was created
            from.
        createdAt:
          type: string
          format: date-time
          description: The datetime when the payment session was created.
        customer:
          $ref: "#/components/schemas/Customer"
        dashboardUrl:
          type: string
          description: The URL to the merchant dashboard for the payment session.
        discountTotal:
          $ref: "#/components/schemas/Money"
        externalReference:
          type: string
          description: Your reference to identify the payment session.
        id:
          type: string
          description: The unique ID for the payment session.
        items:
          type: array
          description: List of items that the customer is purchasing.
          items:
            $ref: "#/components/schemas/Item"
        merchantId:
          type: string
          description: The ID of the merchant that the payment session was created
            for.
        paymentLinkId:
          type: string
          description: The ID of the payment link that the payment session was created
            from.
        payments:
          type: array
          description: List of payments that have been made for the payment session.
          items:
            $ref: "#/components/schemas/Payment"
        requiresShipping:
          type: boolean
          description: Whether the customer is required to provide a shipping address.
        shippingAddress:
          $ref: "#/components/schemas/Address"
        shippingTotal:
          $ref: "#/components/schemas/Money"
        status:
          $ref: "#/components/schemas/PaymentSessionStatus"
        taxTotal:
          $ref: "#/components/schemas/Money"
        total:
          $ref: "#/components/schemas/Money"
        updatedAt:
          type: string
          format: date-time
          description: The datetime when the payment session was last updated.
      required:
      - createdAt
      - dashboardUrl
      - id
      - items
      - merchantId
      - payments
      - status
      - total
      - updatedAt
    PaymentSessionCreateInput:
      type: object
      description: Input for creating a payment session.
      properties:
        billingAddress:
          $ref: "#/components/schemas/AddressInput"
        customer:
          $ref: "#/components/schemas/CustomerInput"
        discountTotal:
          $ref: "#/components/schemas/MoneyInput"
        externalReference:
          type: string
          description: Your reference to identify the payment session.
          example: REF-12345
          maxLength: 255
          minLength: 1
        items:
          type: array
          description: List of items that the customer is purchasing.
          example: null
          items:
            $ref: "#/components/schemas/ItemInput"
        paymentCaptureType:
          $ref: "#/components/schemas/PaymentCaptureType"
        paymentMethod:
          $ref: "#/components/schemas/PaymentMethod"
        requiresShipping:
          type: boolean
          default: false
          description: Whether the customer is required to provide a shipping address.
        sessionKey:
          type: string
          description: |-
            The unique identifier for the payment session. If the same session key has been used,
                                     the existing payment session will be updated with the new values.
          example: DEFC8F15-3BBD-4153-9D6D-3A3D9F06C544
          maxLength: 64
          minLength: 1
        shippingAddress:
          $ref: "#/components/schemas/AddressInput"
        shippingTotal:
          $ref: "#/components/schemas/MoneyInput"
        taxTotal:
          $ref: "#/components/schemas/MoneyInput"
        total:
          $ref: "#/components/schemas/MoneyInput"
      required:
      - paymentMethod
      - sessionKey
      - total
    PaymentSessionStatus:
      type: string
      description: The status of the payment session.
      enum:
      - CANCELLED
      - DECLINED
      - EXPIRED
      - PENDING
      - REQUIRES_ACTION
      - REQUIRES_PAYMENT
      - SUCCEEDED
    PaymentSettlementStatus:
      type: string
      description: The settlement status of the payment.
      enum:
      - NOT_INITIATED
      - ACCEPTED
      - SETTLED
      - FUNDS_RECEIVED
      - SETTLED_EXTERNALLY
    PaymentStatus:
      type: string
      description: The status of the payment.
      enum:
      - CREATED
      - PENDING
      - SUCCEEDED
      - REQUIRES_ACTION
      - FAILED
      - CANCELLED
      - DECLINED
      - EXPIRED
      - VOIDED
      - AUTHORIZED
      - AUTHORIZATION_EXPIRED
    PaymentSummary:
      type: object
      properties:
        isManuallyCapturable:
          type: boolean
          description: Whether the payment can be captured manually later.
        isRefundable:
          type: boolean
          description: Whether the payment is refundable.
        isVoidable:
          type: boolean
          description: Whether the payment is voidable.
        paymentActions:
          type: array
          description: The list of actions that can be performed on the payment.
          items:
            $ref: "#/components/schemas/PaymentAction"
        refundableAmount:
          $ref: "#/components/schemas/Money"
      required:
      - isManuallyCapturable
      - isRefundable
      - isVoidable
      - paymentActions
      - refundableAmount
    PaymentVoidReason:
      type: string
      description: The reason the payment was voided.
      enum:
      - CUSTOMER_REQUEST
      - MERCHANT_REQUEST
      - SUSPECTED_FRAUD
      - STOCK_ISSUES
      - INVALID_DATA
    StartEnd:
      type: object
      description: Date range for the export.
      properties:
        end:
          type: string
          format: date-time
        start:
          type: string
          format: date-time
      required:
      - end
      - start
    StatementExportRequest:
      type: object
      description: Request statement export.
      properties:
        disbursementBatchId:
          type: string
        exportFormat:
          type: string
          description: Format for export.
          enum:
          - OFX_V2
        range:
          $ref: "#/components/schemas/StartEnd"
      required:
      - exportFormat
    Webhook:
      type: object
      properties:
        headers:
          type: object
          additionalProperties:
            type: string
            description: Custom headers for the webhook.
          description: Custom headers for the webhook.
        id:
          type: string
          description: The unique ID of the webhook.
        merchantId:
          type: string
          description: The ID of the merchant that the webhook belongs to.
        status:
          $ref: "#/components/schemas/WebhookStatus"
        subscribedEvents:
          type: array
          description: The events that the webhook is subscribed to.
          items:
            $ref: "#/components/schemas/WebhookEventType"
          uniqueItems: true
        url:
          type: string
          description: The URL to send the webhook events to.
      required:
      - headers
      - id
      - merchantId
      - status
      - subscribedEvents
      - url
    WebhookCreateInput:
      type: object
      description: The input for creating a webhook.
      properties:
        headers:
          type: object
          additionalProperties:
            type: string
            description: Custom headers for the webhook
            nullable: true
          description: Custom headers for the webhook
          nullable: true
        subscribedEvents:
          type: array
          description: The events to subscribe to.
          example:
          - PAYMENT_SUCCEEDED
          - REFUND_SUCCEEDED
          items:
            $ref: "#/components/schemas/WebhookEventType"
          maxItems: 2147483647
          minItems: 1
          uniqueItems: true
        url:
          type: string
          description: The URL to send the webhook event to.
          example: https://example.com/webhook
      required:
      - headers
      - subscribedEvents
      - url
    WebhookEventType:
      type: string
      description: The event type of the webhook.
      enum:
      - PAYMENT_AUTHORIZED
      - PAYMENT_COMPLETED
      - PAYMENT_SUCCEEDED
      - REFUND_COMPLETED
      - REFUND_SUCCEEDED
      example: "[\"PAYMENT_SUCCEEDED\"]"
    WebhookPage:
      type: object
      properties:
        pageable:
          $ref: "#/components/schemas/Pageable"
        results:
          type: array
          items:
            $ref: "#/components/schemas/Webhook"
        total:
          type: integer
          format: int32
      required:
      - pageable
      - results
      - total
    WebhookStatus:
      type: string
      description: The status of the webhook.
      enum:
      - ENABLED
      - DISABLED
    WebhookUpdateInput:
      type: object
      description: The input for updating a webhook.
      properties:
        headers:
          type: object
          additionalProperties:
            type: string
            description: Custom headers for the webhook
            nullable: true
          description: Custom headers for the webhook
          nullable: true
        status:
          $ref: "#/components/schemas/WebhookStatus"
        subscribedEvents:
          type: array
          description: The events to subscribe to.
          example:
          - PAYMENT_SUCCEEDED
          items:
            $ref: "#/components/schemas/WebhookEventType"
          uniqueItems: true
        url:
          type: string
          description: The URL to send the webhook event to.
          example: https://example.com/new/webhook
  securitySchemes:
    apiKey:
      bearerFormat: JWT
      scheme: bearer
      type: http

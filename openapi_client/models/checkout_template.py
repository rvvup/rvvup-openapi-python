# coding: utf-8

"""
    Rvvup API

    Rvvup Public API

    The version of the OpenAPI document: 2024-03-01
    Contact: info@rvvup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_source import ApplicationSource
from openapi_client.models.checkout_amount_type import CheckoutAmountType
from openapi_client.models.checkout_customer_fields import CheckoutCustomerFields
from openapi_client.models.checkout_payment_method_settings import CheckoutPaymentMethodSettings
from openapi_client.models.payment_method import PaymentMethod
from typing import Optional, Set
from typing_extensions import Self

class CheckoutTemplate(BaseModel):
    """
    CheckoutTemplate
    """ # noqa: E501
    amount_type: CheckoutAmountType = Field(alias="amountType")
    created_at: datetime = Field(description="The datetime when the checkout template was created.", alias="createdAt")
    customer_fields: Optional[CheckoutCustomerFields] = Field(default=None, alias="customerFields")
    enabled_payment_methods: Optional[List[PaymentMethod]] = Field(default=None, description="Ordered list of payment methods that are enabled for the checkout.", alias="enabledPaymentMethods")
    id: StrictStr = Field(description="The unique ID of the checkout template.")
    merchant_id: StrictStr = Field(description="The ID of the merchant that owns this checkout template.", alias="merchantId")
    name: StrictStr = Field(description="The name of the checkout template.")
    notify_customer: StrictBool = Field(description="Whether the customer should be notified on payment completion.", alias="notifyCustomer")
    notify_merchant: StrictBool = Field(description="Whether you should be notified on payment completion.", alias="notifyMerchant")
    payment_method_settings: Optional[CheckoutPaymentMethodSettings] = Field(default=None, alias="paymentMethodSettings")
    source: ApplicationSource
    updated_at: datetime = Field(description="The datetime when the checkout template was last updated.", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["amountType", "createdAt", "customerFields", "enabledPaymentMethods", "id", "merchantId", "name", "notifyCustomer", "notifyMerchant", "paymentMethodSettings", "source", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckoutTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer_fields
        if self.customer_fields:
            _dict['customerFields'] = self.customer_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_method_settings
        if self.payment_method_settings:
            _dict['paymentMethodSettings'] = self.payment_method_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckoutTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amountType": obj.get("amountType"),
            "createdAt": obj.get("createdAt"),
            "customerFields": CheckoutCustomerFields.from_dict(obj["customerFields"]) if obj.get("customerFields") is not None else None,
            "enabledPaymentMethods": obj.get("enabledPaymentMethods"),
            "id": obj.get("id"),
            "merchantId": obj.get("merchantId"),
            "name": obj.get("name"),
            "notifyCustomer": obj.get("notifyCustomer"),
            "notifyMerchant": obj.get("notifyMerchant"),
            "paymentMethodSettings": CheckoutPaymentMethodSettings.from_dict(obj["paymentMethodSettings"]) if obj.get("paymentMethodSettings") is not None else None,
            "source": obj.get("source"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj



# coding: utf-8

"""
    Rvvup API

    Rvvup Public API

    The version of the OpenAPI document: 2024-03-01
    Contact: info@rvvup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List
from openapi_client.models.money import Money
from openapi_client.models.payment_action import PaymentAction
from typing import Optional, Set
from typing_extensions import Self

class PaymentSummary(BaseModel):
    """
    PaymentSummary
    """ # noqa: E501
    is_manually_capturable: StrictBool = Field(description="Whether the payment can be captured manually later.", alias="isManuallyCapturable")
    is_refundable: StrictBool = Field(description="Whether the payment is refundable.", alias="isRefundable")
    is_voidable: StrictBool = Field(description="Whether the payment is voidable.", alias="isVoidable")
    payment_actions: List[PaymentAction] = Field(description="The list of actions that can be performed on the payment.", alias="paymentActions")
    refundable_amount: Money = Field(alias="refundableAmount")
    __properties: ClassVar[List[str]] = ["isManuallyCapturable", "isRefundable", "isVoidable", "paymentActions", "refundableAmount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in payment_actions (list)
        _items = []
        if self.payment_actions:
            for _item in self.payment_actions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paymentActions'] = _items
        # override the default output from pydantic by calling `to_dict()` of refundable_amount
        if self.refundable_amount:
            _dict['refundableAmount'] = self.refundable_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isManuallyCapturable": obj.get("isManuallyCapturable"),
            "isRefundable": obj.get("isRefundable"),
            "isVoidable": obj.get("isVoidable"),
            "paymentActions": [PaymentAction.from_dict(_item) for _item in obj["paymentActions"]] if obj.get("paymentActions") is not None else None,
            "refundableAmount": Money.from_dict(obj["refundableAmount"]) if obj.get("refundableAmount") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Rvvup API

    Rvvup Public API

    The version of the OpenAPI document: 2024-03-01
    Contact: info@rvvup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.checkout_apple_pay_settings_update_input import CheckoutApplePaySettingsUpdateInput
from openapi_client.models.checkout_card_settings_update_input import CheckoutCardSettingsUpdateInput
from openapi_client.models.checkout_pay_by_bank_settings_update_input import CheckoutPayByBankSettingsUpdateInput
from typing import Optional, Set
from typing_extensions import Self

class CheckoutPaymentMethodSettingsUpdateInput(BaseModel):
    """
    The payment method settings to be used for the checkout.
    """ # noqa: E501
    apple_pay: Optional[CheckoutApplePaySettingsUpdateInput] = Field(default=None, alias="applePay")
    card: Optional[CheckoutCardSettingsUpdateInput] = None
    pay_by_bank: Optional[CheckoutPayByBankSettingsUpdateInput] = Field(default=None, alias="payByBank")
    __properties: ClassVar[List[str]] = ["applePay", "card", "payByBank"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckoutPaymentMethodSettingsUpdateInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of apple_pay
        if self.apple_pay:
            _dict['applePay'] = self.apple_pay.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pay_by_bank
        if self.pay_by_bank:
            _dict['payByBank'] = self.pay_by_bank.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckoutPaymentMethodSettingsUpdateInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applePay": CheckoutApplePaySettingsUpdateInput.from_dict(obj["applePay"]) if obj.get("applePay") is not None else None,
            "card": CheckoutCardSettingsUpdateInput.from_dict(obj["card"]) if obj.get("card") is not None else None,
            "payByBank": CheckoutPayByBankSettingsUpdateInput.from_dict(obj["payByBank"]) if obj.get("payByBank") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Rvvup API

    Rvvup Public API

    The version of the OpenAPI document: 2024-03-01
    Contact: info@rvvup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.customer import Customer
from openapi_client.models.item import Item
from openapi_client.models.money import Money
from openapi_client.models.payment import Payment
from openapi_client.models.payment_session_status import PaymentSessionStatus
from typing import Optional, Set
from typing_extensions import Self

class PaymentSession(BaseModel):
    """
    PaymentSession
    """ # noqa: E501
    billing_address: Optional[Address] = Field(default=None, alias="billingAddress")
    checkout_id: Optional[StrictStr] = Field(default=None, description="The ID of the checkout that the payment session was created from.", alias="checkoutId")
    created_at: datetime = Field(description="The datetime when the payment session was created.", alias="createdAt")
    customer: Optional[Customer] = None
    dashboard_url: StrictStr = Field(description="The URL to the merchant dashboard for the payment session.", alias="dashboardUrl")
    discount_total: Optional[Money] = Field(default=None, alias="discountTotal")
    external_reference: Optional[StrictStr] = Field(default=None, description="Your reference to identify the payment session.", alias="externalReference")
    id: StrictStr = Field(description="The unique ID for the payment session.")
    items: List[Item] = Field(description="List of items that the customer is purchasing.")
    merchant_id: StrictStr = Field(description="The ID of the merchant that the payment session was created for.", alias="merchantId")
    payment_link_id: Optional[StrictStr] = Field(default=None, description="The ID of the payment link that the payment session was created from.", alias="paymentLinkId")
    payments: List[Payment] = Field(description="List of payments that have been made for the payment session.")
    requires_shipping: Optional[StrictBool] = Field(default=None, description="Whether the customer is required to provide a shipping address.", alias="requiresShipping")
    shipping_address: Optional[Address] = Field(default=None, alias="shippingAddress")
    shipping_total: Optional[Money] = Field(default=None, alias="shippingTotal")
    status: PaymentSessionStatus
    tax_total: Optional[Money] = Field(default=None, alias="taxTotal")
    total: Money
    updated_at: datetime = Field(description="The datetime when the payment session was last updated.", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["billingAddress", "checkoutId", "createdAt", "customer", "dashboardUrl", "discountTotal", "externalReference", "id", "items", "merchantId", "paymentLinkId", "payments", "requiresShipping", "shippingAddress", "shippingTotal", "status", "taxTotal", "total", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentSession from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billingAddress'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discount_total
        if self.discount_total:
            _dict['discountTotal'] = self.discount_total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payments (list)
        _items = []
        if self.payments:
            for _item in self.payments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['payments'] = _items
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shippingAddress'] = self.shipping_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_total
        if self.shipping_total:
            _dict['shippingTotal'] = self.shipping_total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_total
        if self.tax_total:
            _dict['taxTotal'] = self.tax_total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total
        if self.total:
            _dict['total'] = self.total.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentSession from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingAddress": Address.from_dict(obj["billingAddress"]) if obj.get("billingAddress") is not None else None,
            "checkoutId": obj.get("checkoutId"),
            "createdAt": obj.get("createdAt"),
            "customer": Customer.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "dashboardUrl": obj.get("dashboardUrl"),
            "discountTotal": Money.from_dict(obj["discountTotal"]) if obj.get("discountTotal") is not None else None,
            "externalReference": obj.get("externalReference"),
            "id": obj.get("id"),
            "items": [Item.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "merchantId": obj.get("merchantId"),
            "paymentLinkId": obj.get("paymentLinkId"),
            "payments": [Payment.from_dict(_item) for _item in obj["payments"]] if obj.get("payments") is not None else None,
            "requiresShipping": obj.get("requiresShipping"),
            "shippingAddress": Address.from_dict(obj["shippingAddress"]) if obj.get("shippingAddress") is not None else None,
            "shippingTotal": Money.from_dict(obj["shippingTotal"]) if obj.get("shippingTotal") is not None else None,
            "status": obj.get("status"),
            "taxTotal": Money.from_dict(obj["taxTotal"]) if obj.get("taxTotal") is not None else None,
            "total": Money.from_dict(obj["total"]) if obj.get("total") is not None else None,
            "updatedAt": obj.get("updatedAt")
        })
        return _obj



# coding: utf-8

"""
    Rvvup API

    Rvvup Public API

    The version of the OpenAPI document: 2024-03-01
    Contact: info@rvvup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.address_input import AddressInput
from openapi_client.models.customer_input import CustomerInput
from openapi_client.models.item_input import ItemInput
from openapi_client.models.money_input import MoneyInput
from openapi_client.models.payment_capture_type import PaymentCaptureType
from openapi_client.models.payment_method import PaymentMethod
from typing import Optional, Set
from typing_extensions import Self

class PaymentSessionCreateInput(BaseModel):
    """
    Input for creating a payment session.
    """ # noqa: E501
    billing_address: Optional[AddressInput] = Field(default=None, alias="billingAddress")
    customer: Optional[CustomerInput] = None
    discount_total: Optional[MoneyInput] = Field(default=None, alias="discountTotal")
    external_reference: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=255)]] = Field(default=None, description="Your reference to identify the payment session.", alias="externalReference")
    items: Optional[List[ItemInput]] = Field(default=None, description="List of items that the customer is purchasing.")
    payment_capture_type: Optional[PaymentCaptureType] = Field(default=None, alias="paymentCaptureType")
    payment_method: PaymentMethod = Field(alias="paymentMethod")
    requires_shipping: Optional[StrictBool] = Field(default=False, description="Whether the customer is required to provide a shipping address.", alias="requiresShipping")
    session_key: Annotated[str, Field(min_length=1, strict=True, max_length=64)] = Field(description="The unique identifier for the payment session. If the same session key has been used,                          the existing payment session will be updated with the new values.", alias="sessionKey")
    shipping_address: Optional[AddressInput] = Field(default=None, alias="shippingAddress")
    shipping_total: Optional[MoneyInput] = Field(default=None, alias="shippingTotal")
    tax_total: Optional[MoneyInput] = Field(default=None, alias="taxTotal")
    total: MoneyInput
    __properties: ClassVar[List[str]] = ["billingAddress", "customer", "discountTotal", "externalReference", "items", "paymentCaptureType", "paymentMethod", "requiresShipping", "sessionKey", "shippingAddress", "shippingTotal", "taxTotal", "total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentSessionCreateInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billingAddress'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discount_total
        if self.discount_total:
            _dict['discountTotal'] = self.discount_total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shippingAddress'] = self.shipping_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_total
        if self.shipping_total:
            _dict['shippingTotal'] = self.shipping_total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax_total
        if self.tax_total:
            _dict['taxTotal'] = self.tax_total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total
        if self.total:
            _dict['total'] = self.total.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentSessionCreateInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingAddress": AddressInput.from_dict(obj["billingAddress"]) if obj.get("billingAddress") is not None else None,
            "customer": CustomerInput.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "discountTotal": MoneyInput.from_dict(obj["discountTotal"]) if obj.get("discountTotal") is not None else None,
            "externalReference": obj.get("externalReference"),
            "items": [ItemInput.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "paymentCaptureType": obj.get("paymentCaptureType"),
            "paymentMethod": obj.get("paymentMethod"),
            "requiresShipping": obj.get("requiresShipping") if obj.get("requiresShipping") is not None else False,
            "sessionKey": obj.get("sessionKey"),
            "shippingAddress": AddressInput.from_dict(obj["shippingAddress"]) if obj.get("shippingAddress") is not None else None,
            "shippingTotal": MoneyInput.from_dict(obj["shippingTotal"]) if obj.get("shippingTotal") is not None else None,
            "taxTotal": MoneyInput.from_dict(obj["taxTotal"]) if obj.get("taxTotal") is not None else None,
            "total": MoneyInput.from_dict(obj["total"]) if obj.get("total") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Rvvup API

    Rvvup Public API

    The version of the OpenAPI document: 2024-03-01
    Contact: info@rvvup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.application_source import ApplicationSource
from openapi_client.models.checkout_amount_type import CheckoutAmountType
from openapi_client.models.checkout_customer_fields_input import CheckoutCustomerFieldsInput
from openapi_client.models.checkout_payment_method_settings_input import CheckoutPaymentMethodSettingsInput
from openapi_client.models.payment_method import PaymentMethod
from typing import Optional, Set
from typing_extensions import Self

class CheckoutTemplateCreateInput(BaseModel):
    """
    The input for creating a checkout template.
    """ # noqa: E501
    amount_type: Optional[CheckoutAmountType] = Field(default=None, alias="amountType")
    customer_fields: Optional[CheckoutCustomerFieldsInput] = Field(default=None, alias="customerFields")
    enabled_payment_methods: Optional[List[PaymentMethod]] = Field(default=None, description="Ordered list of payment methods that are enabled for the checkout.", alias="enabledPaymentMethods")
    name: Annotated[str, Field(min_length=1, strict=True, max_length=255)] = Field(description="The name of the checkout template.")
    notify_customer: Optional[StrictBool] = Field(default=False, description="Whether the customer should be notified on payment completion.", alias="notifyCustomer")
    notify_merchant: Optional[StrictBool] = Field(default=False, description="Whether you should be notified on payment completion.", alias="notifyMerchant")
    payment_method_settings: Optional[CheckoutPaymentMethodSettingsInput] = Field(default=None, alias="paymentMethodSettings")
    source: Optional[ApplicationSource] = None
    __properties: ClassVar[List[str]] = ["amountType", "customerFields", "enabledPaymentMethods", "name", "notifyCustomer", "notifyMerchant", "paymentMethodSettings", "source"]

    @field_validator('enabled_payment_methods')
    def enabled_payment_methods_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set([]):
                raise ValueError("each list item must be one of ()")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckoutTemplateCreateInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer_fields
        if self.customer_fields:
            _dict['customerFields'] = self.customer_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_method_settings
        if self.payment_method_settings:
            _dict['paymentMethodSettings'] = self.payment_method_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckoutTemplateCreateInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amountType": obj.get("amountType"),
            "customerFields": CheckoutCustomerFieldsInput.from_dict(obj["customerFields"]) if obj.get("customerFields") is not None else None,
            "enabledPaymentMethods": obj.get("enabledPaymentMethods"),
            "name": obj.get("name"),
            "notifyCustomer": obj.get("notifyCustomer") if obj.get("notifyCustomer") is not None else False,
            "notifyMerchant": obj.get("notifyMerchant") if obj.get("notifyMerchant") is not None else False,
            "paymentMethodSettings": CheckoutPaymentMethodSettingsInput.from_dict(obj["paymentMethodSettings"]) if obj.get("paymentMethodSettings") is not None else None,
            "source": obj.get("source")
        })
        return _obj



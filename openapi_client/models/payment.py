# coding: utf-8

"""
    Rvvup API

    Rvvup Public API

    The version of the OpenAPI document: 2024-03-01
    Contact: info@rvvup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.money import Money
from openapi_client.models.payment_capture_type import PaymentCaptureType
from openapi_client.models.payment_decline_reason import PaymentDeclineReason
from openapi_client.models.payment_method import PaymentMethod
from openapi_client.models.payment_settlement_status import PaymentSettlementStatus
from openapi_client.models.payment_status import PaymentStatus
from openapi_client.models.payment_summary import PaymentSummary
from openapi_client.models.payment_void_reason import PaymentVoidReason
from typing import Optional, Set
from typing_extensions import Self

class Payment(BaseModel):
    """
    List of payments that have been made for the payment session.
    """ # noqa: E501
    amount: Money
    authorization_expires_at: Optional[datetime] = Field(default=None, description="The datetime when the payment's authorization expires.", alias="authorizationExpiresAt")
    capture_type: Optional[PaymentCaptureType] = Field(default=None, alias="captureType")
    created_at: datetime = Field(description="The datetime when the payment was created.", alias="createdAt")
    decline_reason: Optional[PaymentDeclineReason] = Field(default=None, alias="declineReason")
    id: StrictStr = Field(description="The unique ID for the payment.")
    method: PaymentMethod
    payment_session_id: StrictStr = Field(description="The ID of the payment session that the payment was created in.", alias="paymentSessionId")
    settlement_status: PaymentSettlementStatus = Field(alias="settlementStatus")
    status: PaymentStatus
    summary: PaymentSummary
    updated_at: datetime = Field(description="The datetime when the payment was last updated.", alias="updatedAt")
    void_reason: Optional[PaymentVoidReason] = Field(default=None, alias="voidReason")
    __properties: ClassVar[List[str]] = ["amount", "authorizationExpiresAt", "captureType", "createdAt", "declineReason", "id", "method", "paymentSessionId", "settlementStatus", "status", "summary", "updatedAt", "voidReason"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Payment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Payment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": Money.from_dict(obj["amount"]) if obj.get("amount") is not None else None,
            "authorizationExpiresAt": obj.get("authorizationExpiresAt"),
            "captureType": obj.get("captureType"),
            "createdAt": obj.get("createdAt"),
            "declineReason": obj.get("declineReason"),
            "id": obj.get("id"),
            "method": obj.get("method"),
            "paymentSessionId": obj.get("paymentSessionId"),
            "settlementStatus": obj.get("settlementStatus"),
            "status": obj.get("status"),
            "summary": PaymentSummary.from_dict(obj["summary"]) if obj.get("summary") is not None else None,
            "updatedAt": obj.get("updatedAt"),
            "voidReason": obj.get("voidReason")
        })
        return _obj


